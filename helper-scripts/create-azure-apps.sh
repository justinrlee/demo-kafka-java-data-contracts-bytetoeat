#!/bin/bash
# Usage: ./create-azure-apps.sh <azure-region>

# Check if a region was provided as an argument
if [[ $# -lt 1 || -z "$1" ]]; then
  echo "‚ùå Azure region not specified."
  echo "Usage: $0 <azure-region>"
  exit 1
fi
AZURE_REGION="$1"

TFVARS_FILE="azure-terraform.auto.tfvars"
TFVARS_SECRET_FILE="azure-terraform-secret.auto.tfvars"

# Ensure you are logged in to Azure
az account show > /dev/null 2>&1 || az login

# Get the email of the currently logged in user
OWNER_EMAIL=$(az account show --query user.name -o tsv)

# Azure context
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
TENANT_ID=$(az account show --query tenantId -o tsv)

echo "# Auto-generated by create-azure-apps.sh" > "$TFVARS_FILE"
# Get or generate UNIQUE_ID from tfvars file
if grep -q '^unique_id[[:space:]]*=' "$TFVARS_SECRET_FILE" 2>/dev/null; then
  UNIQUE_ID=$(grep '^unique_id[[:space:]]*=' "$TFVARS_SECRET_FILE" | head -n1 | awk -F= '{gsub(/^[ \t"]+|[ \t"]+$/, "", $2); print $2}')
else
  UNIQUE_ID=$(uuidgen | tr '[:upper:]' '[:lower:]' | cut -c1-6)
  echo "unique_id = \"$UNIQUE_ID\"" >> "$TFVARS_SECRET_FILE"
fi

RESOURCE_GROUP="demo-data-contracts-bytetoeat-$UNIQUE_ID"

# AZURE must be uppercase
echo "cloud = \"AZURE\"" >> "$TFVARS_FILE"
echo "region = \"$AZURE_REGION\"" >> "$TFVARS_FILE"
echo "tenant_id = \"$TENANT_ID\"" >> "$TFVARS_FILE"
echo "subscription_id = \"$SUBSCRIPTION_ID\"" >> "$TFVARS_FILE"

# Create the resource group if it doesn't exist
echo "üì¶ Ensuring resource group exists: $RESOURCE_GROUP"
if ! az group show --name "$RESOURCE_GROUP" > /dev/null 2>&1; then
  az group create --name "$RESOURCE_GROUP" --location "$AZURE_REGION" --tags owner_email="$OWNER_EMAIL" > /dev/null
  echo "üÜï Resource group created: $RESOURCE_GROUP"
else
  echo "‚úÖ Resource group already exists: $RESOURCE_GROUP"
fi
echo "resource_group = \"$RESOURCE_GROUP\"" >> "$TFVARS_FILE"

create_app() {
    echo -e "\n\nüöÄ Starting app creation for $1\n"
    APP_NAME=$1
    ROLE_NAME=$2

    echo "üîç Checking for existing app registration: $APP_NAME"
    EXISTING_APP_ID=$(az ad app list --display-name "$APP_NAME" --query "[0].appId" -o tsv)

    if [[ -z "$EXISTING_APP_ID" ]]; then
        echo "üÜï Creating new app registration: $APP_NAME"
        APP_ID=$(az ad app create --display-name "$APP_NAME" --query "appId" -o tsv)
    else
        echo "‚úÖ Found existing app: $APP_NAME"
        APP_ID=$EXISTING_APP_ID
    fi

    echo "üîê Ensuring client secret exists for $APP_NAME"
    EXISTING_SECRET_ID=$(az ad app credential list --id "$APP_ID" --query "[0].keyId" -o tsv)
    if [[ -z "$EXISTING_SECRET_ID" ]]; then
        CLIENT_SECRET=$(az ad app credential reset \
            --id "$APP_ID" \
            --append \
            --display-name "default" \
            --query "password" -o tsv)
        echo "üÜï Created new client secret for $APP_NAME"
    else
        echo "‚úÖ Client secret already exists for $APP_NAME (not rotated, value unavailable)"
    fi

    echo "üë§ Ensuring service principal exists for $APP_NAME"
    SP_EXISTS=$(az ad sp list --filter "appId eq '$APP_ID'" --query "[0].appId" -o tsv)
    if [[ -z "$SP_EXISTS" ]]; then
        az ad sp create --id "$APP_ID" --only-show-errors > /dev/null 2>&1
        # Loop forever until the service principal is available
        LOOP_COUNT=0
        while true; do
            SP_EXISTS=$(az ad sp list --filter "appId eq '$APP_ID'" --query "[0].appId" -o tsv 2>/dev/null)
            if [[ -n "$SP_EXISTS" ]]; then
                echo "‚úÖ Created service principal for $APP_NAME"
                break
            fi
            ((LOOP_COUNT++))
            echo "‚è≥ [SP Wait Loop #$LOOP_COUNT] Waiting for service principal to be available for $APP_NAME..."
            sleep 5
        done
    else
        echo "‚úÖ Service principal already exists"
    fi

    if [[ -n "$ROLE_NAME" ]]; then
        echo "üõ° Checking if '$ROLE_NAME' role is already assigned to $APP_NAME (scoped to resource group)"
        ROLE_ASSIGNED=$(az role assignment list \
            --assignee "$APP_ID" \
            --role "$ROLE_NAME" \
            --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP" \
            --query "[0].id" -o tsv)
        if [[ -z "$ROLE_ASSIGNED" ]]; then
            echo "üõ° Assigning '$ROLE_NAME' role to $APP_NAME (scoped to resource group)"
            az role assignment create \
                --assignee "$APP_ID" \
                --role "$ROLE_NAME" \
                --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP" \
                --only-show-errors
        else
            echo "‚úÖ Role '$ROLE_NAME' already assigned to $APP_NAME"
        fi
    fi

    # ‚ûï Add to tfvars
    # Strip the unique_id from the APP_NAME for the tfvars key
    TFVARS_KEY_PREFIX=$(echo "$APP_NAME" | sed "s/-$UNIQUE_ID//g" | sed "s/-/_/g")
    echo "${TFVARS_KEY_PREFIX}_client_id = \"$APP_ID\"" >> "$TFVARS_FILE"
    if [[ -n "$CLIENT_SECRET" ]]; then
        echo "${TFVARS_KEY_PREFIX}_client_secret = \"$CLIENT_SECRET\"" >> "$TFVARS_SECRET_FILE"
    fi
}

# Create apps in App registrations
create_app "demo-data-contracts-bytetoeat-$UNIQUE_ID-tf" "Contributor"
create_app "demo-data-contracts-bytetoeat-$UNIQUE_ID-java-producer" ""
create_app "demo-data-contracts-bytetoeat-$UNIQUE_ID-java-consumer" ""

echo "‚úÖ Done. Outputs written to $TFVARS_FILE"
